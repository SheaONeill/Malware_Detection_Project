#!/bin/bash

#this function reads from the database and compares results
#to arguments passed in 
read_database_function () {

#check arguments
if [ ! -n "$1" ];
    then
        echo "Usage: $(basename $0) md5 table1 table2 etc.. see read_hash_log_function"
        exit 85
fi

clear
#echo -e "\nIn read_database_function from script: $0\n"
#
if [[ "$4" == "ssdeep" ]];then
    #echo -e "\nFinish this Shea"
    which_value="*"
            query_string="select $which_value from $2 UNION select $which_value from $3"
            #IFS is internal field separator \t tab
            #while IFS=$'\t' read id name md5 type released
            while IFS=$'\t' read -r id name md5 ssdeep type released
            do
                 
                #check if type is malware
                if [[ "$type" != "benign" ]]; then     
                    #echo -e "Arg: $1 matches $name in $2" >> ${LOG_DIR}/found_ssdeep_malware.log
                    #save deatails of matched row from database
                    echo -e "$ssdeep" >> ${LOG_DIR}/ssdeep_malware_hashes.log     
                fi
                
                #check if type is benign from database
                if [[ "$type" == "benign" ]]; then                      
                    #echo "Arg: $1 matches $name in $3" >> ${LOG_DIR}/found_ssdeep_benign.log
                    #save deatails of matched row from database
                     echo -e "$ssdeep" >> ${LOG_DIR}/ssdeep_benign_hashes.log                      
                 fi
                 
            done < <(mysql -h $host -u $name -p$pass $dbname -s -e "$query_string;") 
    
    
    
              
                        #check if not already in log otherwise insert
                        #having issues with this was attepting to avoid duplicates
                        #grep -q -F "$ssdeep" ${LOG_DIR}/ssdeep_benign_hashes.log || echo "$ssdeep" >> ${LOG_DIR}/ssdeep_benign_hashes.log 
                        #echo -e "$ssdeep" >> ${LOG_DIR}/ssdeep_benign_hashes.log
                #        echo -e "$1 matches $name in $2"
                   #     echo -e "ID: $id \nName: $name \nMD5: $md5 \nSSDeep\: $ssdeep \nType: $type \nRelease Date: $released"
                #check if not benign                           
                #elif [[ "$type" != "benign" ]]; then 
                        #check if not already in log otherwise insert
                        #having issues with this was attepting to avoid duplicates
                        #grep -q -F "$ssdeep" ${LOG_DIR}/ssdeep_malware_hashes.log || echo "$ssdeep" >> ${LOG_DIR}/ssdeep_malware_hashes.log
                        #echo "$ssdeep" >> ${LOG_DIR}/ssdeep_malware_hashes.log
                #fi
             #done;
      else
            which_value="*"
            query_string="select $which_value from $2 UNION select $which_value from $3"
            #IFS is internal field separator \t tab
            #while IFS=$'\t' read id name md5 type released
            while IFS=$'\t' read -r id name md5 ssdeep type released
            do
                #check if argument 1 matches md5 from database !good ye?
                if [[ "$1" == "$md5" && "$type" != "benign" ]]; then  
                   
                    echo -e "$1 matches $name in $2" >> ${LOG_DIR}/found_malware.log
                    #save deatails of matched row from database
                    echo -e "ID: $id \nName: $name \nMD5: $md5 \nType: $type \nRelease Date: $released" >> ${LOG_DIR}/found_malware.log
                    #save md5hash to log
                    echo -e "$md5" >> ${LOG_DIR}/found_malware_hashes.log     
                fi
                
                #check if argument 1 matches md5 from database
                if [[ "$1" == "$md5" && "$type" == "benign" ]]; then  
                    
                    echo "$1 matches $name in $3" >> ${LOG_DIR}/benign.log
                    #save deatails of matched row from database
                    echo -e "ID: $id \nName: $name \nMD5: $md5 \nType: $type \nRelease Date: $released" >> ${LOG_DIR}/benign.log
                     #save md5hash to log
                    echo -e "$md5" >> ${LOG_DIR}/benign_hashes.log
                      
                 fi
                 
            done < <(mysql -h $host -u $name -p$pass $dbname -s -e "$query_string;") 
            
fi
clear
} 

#setup_db_vars
setup_db_vars () {
    	#todo if user enters nothing use localhost as default
    	host='localhost'
    	dbname="malware_project"
    	name='root'
    	pass='root'   
	}

#call setup_db_vars function	
setup_db_vars	
#call  read_database_function pass agruments
read_database_function $1 $2 $3 $4
