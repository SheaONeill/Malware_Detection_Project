#!/bin/bash
#if test $( $FileToCheck | wc -c) -eq 0 ; then
#if [[ -z $FileToCheck || wc -n ]]; then 
#the above was to check that user entered non empty input (not working tho)
echo Testing Malware
echo enter the name of the file to check
read FileToCheck
#fi
echo test $FieToCheck
echo Locating $FileToCheck 
#location="locate $FileToCheck"
#the above locate command uses a previously built database (command updatedb)
#this wont work for newly created files
#so using find command for files not in database (much slower tho)
location="find / -name $FileToCheck -type f"
#if [ -z "$location" ]
# above is supposed to check if location is null (not working tho)
#then echo Cannot seem to find the file 
#exit 0
#fi
#display FileToCheck and locaton variable (testing)
echo -n $FileToCheck is located at: ;$location
#need to get the value of $location
#needed to wrap brackets otherwise it included path and file name
md5=(md5sum $location)
#eg. output of $md5 was <some-hash-value> <path><filename>
md5=($(md5sum $($location)))
#display the file checked and md5sum
echo -e "\nThe MD5sum of ${FileToCheck} is: $md5"
# testing against a textfile will update this to database
#set foundIt variable to grep command  
foundIt="grep --color "$md5" /root/Desktop/Malware-Project-AS02/dir-test"
#if grep -Fxq "$md5" /root/Desktop/Malware-Project-AS02/dir-test
#test if true or false
if $foundIt
then
    # echo if found
    echo -e "${Red}This is known malware found in our database"
    #this was a test to grab the line that matches the hash
    #grep "$md5" /root/Desktop/dir-test
    #this will only return the string vaule
    #echo $foundIt
    #this is to grab the line that mathes the hash reworked from above
    #wrapped in brackets returns the actual value when executed
    echo $($foundIt)
else
    # echo if not found
    echo -e "${GREEN}Not found in database presumed safe ${RED}(dont take my word for that tho)"
fi
#
#TODO
#find all executable files in directory and check hashes
#echo -n 'test' | md5sum | cut -d' ' -f1
#find -name "*" -type f -executable | md5sum * | grep /root/Desktop/dir-test

#this is giving me an error (ask stephen or kevin about this)
#error: md5sum: <some-directory>: Is a directory
#find -name "*" -type f -executable | md5sum * | cut -d' ' -f1 | grep /root/Desktop/dir-test

#this will give me just the hashes cutting the filename
#find -name "*" -type f -executable | md5sum * | cut -d' ' -f1 
#i need to check these against my file of known hahses



#save all hashes to dir-test
#find -name "*" -type f -executable | md5sum * > dir-test
#check against text-file or database
#owasp hash database
#dig TXT 84C0C5914FF0B825141BA2C6A9E3D6F4.hash.sapao.net

#grep -f dir-test test-hashes-txt

#ref:http://askubuntu.com/questions/442960/how-to-automate-comparison-of-md5sum-hash-values-for-a-large-number-of-files
#md5sum -c md5sum_formatted_file.txt
#<md5sum_checksum><space><space><file_name>

#todo
#create function/method to call if user wants to check directory or file
#eg if directory then call method
#check files against database online or local
#look into fuzzy hashing finding techniques
#working
#
#get the hash values from directory/s
#find -name "*" -type f -executable | md5sum * | cut -d' ' -f1 > newtest-hashes-found
#check to see if hashes from malware hashes match found hashes
#grep -Fwf "/root/Desktop/Malware-Project-AS02/newtest-hashes-found" "/root/Desktop/Malware-Project-AS02/test_hashses.txt" 
