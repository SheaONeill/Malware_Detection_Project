#!/bin/bash

main () {
	 	
	#call copy_files function
	#copy_files
	#call get_db_details function
     	setup_db_vars
     	echo "Current Script $(basename ${0})";
     	echo "Directory: $(dirname "${0}")/"
	#call menu function
	menu
	exit 0	
	}

menu () {
	CHOICES="setup_database scan_file scan_directory ssdeep_check quit"
		echo "stage 1"
	select choice in $CHOICES
	  do 
	    case $choice in
              setup_database)
		setup_db
		echo "stage 2a"
		;;
	      scan_file)
		query_blacklist && query_whitelist && test_file_to_check_function && testing_results
echo "stage 2b"
		;;
	      scan_directory)
		query_blacklist && query_whitelist && find_files_dir && strip_hash && testing_results
echo "stage 2c"
		;;
	      ssdeep_check)
		ssdeep_check
echo "stage 2d"
		;;	
	      quit)
echo "stage 2e"
		echo $myitem
		break;
		;;	
	    esac
echo "stage 3"
          done	;
	}

#ssdeep_check
ssdeep_check () {
	echo -e "\nIn ssdeep check"
	which_ssdeep=`which ssdeep`
	   if [ -z "$which_ssdeep" ];
	     then echo "not found"
                get_ssdeep=`apt-get update && apt-install ssdeep`
             	get_ssdeep
	     	echo "${which_ssdeep}"
	     else
	        echo "found ssdeep"
	        echo "${which_ssdeep}"
	   fi
		}
#copy files functions
copy_files () {
	exit 0
	}
#-------- begin setup database functions --------
#setup database function
setup_db () {
    #setup database call dbsetup script and pass values
    /root/Desktop/Malware-Project-AS02/latest/dbsetup $host $dbname $name $pass
	}

#setup_db_vars
setup_db_vars () {
    	#todo if user enters nothing use localhost as default
    	host='localhost'
    	dbname="malware_project"
    	name='root'
    	pass='root'   
	}

#get user input
get_db_details () {
    	echo -n "database host: "
    	#todo if user enters nothing use localhost as default
    	read host
    	echo -en "database name: "
    	read dbname
    	echo -en "username: "
    	#todo if user enters nothing use localhost as default
    	read name
    	echo -en "password: "
	read pass    
	}
#-------- end get_db_details function --------

#-------- begin query_blacklist function --------
#query_blacklist and store result 

query_blacklist () {
	bad_md5_query="select * from blacklist"
	md5_query="select * from blacklist"
    	#set result variable to query results
        echo -e "\n\nIn md5 check: values are $host $dbname $name $pass"
    	bad_result=$(mysql -h $host -u $name -p$pass $dbname -s -e "$bad_md5_query;") 
    	echo -n 'Bad Result: '$bad_result
	}

#-------- end query_blacklist function --------


#-------- begin query_whitelist function --------
#query_whitelist and store result 

query_whitelist () {
	good_md5_query="select * from whitelist"
    	#set result variable to query results
        echo -e "\n\nIn md5 check: values are $host $dbname $name $pass"
    	good_result=$(mysql -h $host -u $name -p$pass $dbname -s -e "$good_md5_query;") 
    	echo -n 'Good Result: '$good_result
	}

#-------- end query_whitelist function --------



#-------- begin find function --------
#call this function if its a dir to check and save md5 and filename results to hash.log
find_files_dir () {
	echo -e "\nIn find_files_directory function now"
	#to do store paths in variables as locations may change
	echo -n "current directory: ";pwd
    echo -n "enter the directory to check: "
	#read scan_dir
	#find hashes of executables
	scan_dir="/root/Desktop/Malware-Project-AS02/latest/test_dir/"
	echo -e "\nScan dir is $scan_dir"
	cd $scan_dir
	echo -n "current directory now is: ";pwd
	location="$(pwd)"
	echo -e "\nLocation is: ${location}"
	find . -name "*" -type f -executable | md5sum * > /root/Desktop/Malware-Project-AS02/latest/scan_dir_hash.log
	echo -e "\nHash log find files directory results"
	cat /root/Desktop/Malware-Project-AS02/latest/scan_dir_hash.log
	}
 
#call this function if its a file to check
test_file_to_check_function () {
	echo "Testing Malware test_file_to_check_function"
	echo enter the name of the file to check
	read FileToCheck
	echo test $FileToCheck
	echo Locating $FileToCheck 
	location="find /root/Desktop/ -name $FileToCheck -type f"
	echo -e "\nlocation val is ${location}"
	#display FileToCheck and locaton variable (testing)
	echo -n $FileToCheck is located at: ;${location}
	#need to get the value of $location
	#needed to wrap brackets otherwise it included path and file name
	#md5=(md5sum $location)
	#eg. output of $md5 was <some-hash-value> <path><filename>
	md5=($(md5sum $($location))) 
	#display the file checked and md5sum
	echo -e "\nThe MD5sum of ${FileToCheck} is: $md5"
	echo $md5 > /root/Desktop/Malware-Project-AS02/latest/stripped_hash.log

	}
#-------- end find function --------

#-------- begin strip hash function --------

strip_hash () {
	#strip the hash
	echo -e "\nin strip_hash function now"
	echo  "$bad_result" | grep --color -Fwf "/root/Desktop/Malware-Project-AS02/latest/scan_dir_hash.log" | cut -d' ' -f1 "/root/Desktop/Malware-Project-AS02/latest/scan_dir_hash.log" > /root/Desktop/Malware-Project-AS02/latest/stripped_hash.log
	echo -e "\nstripped_hash.log strip_hash function results"	
	cat /root/Desktop/Malware-Project-AS02/latest/stripped_hash.log
	}

#-------- end strip hash function --------

#-------- test function --------
testing_results () {
	echo -e "\nin testing_results function now"
		
	cat /root/Desktop/Malware-Project-AS02/latest/stripped_hash.log
	if grep --color -Fwf "/root/Desktop/Malware-Project-AS02/latest/stripped_hash.log" <<< $bad_result #this is working now
		#to do show the matchin file name path of dodgey file
   	     	then echo "This is known malware found in our database"    
	    	echo -n $FileToCheck is located at: ;${location} 
		#below not working sets the $location to find caommand as well just need the result maybe OUTPUT="$(ls -1)"
		#cp "${location%/}" '/root/Desktop/Malware-Project-AS02/latest/test_dir/quarantine'

	elif grep --color -Fwf "/root/Desktop/Malware-Project-AS02/latest/stripped_hash.log" <<< $good_result #this is working now
		#to do show the matchin file name path of dodgey file
   	     	then echo "This matches database"    
	    	echo -n $FileToCheck is located at: ;${location}
	
	else
	    # echo if not found
	    echo -e "Not found in database presumed safe"
	fi
	}
echo -e "\nresults: $good_result"
#-------- end test function --------  


main "$@"

