#!/bin/bash
#putting all these test scenarios in a fuction this could be dead code hmmm
#so i dont have to comment them out and can call it if i need refresher ;)
#
second_attempt_function () {
	#todo call this from another script and pass in query
	md5_query="select * from malware"
	#mysql -h 52.232.84.126 -u shea -p'Shea@dfcs%2017' malware_assignment -e "$query";
	#ref:http://unix.stackexchange.com/questions/169560/how-do-run-mysql-scripts-from-a-shell-script-with-bash-variables
	result=($(mysql -h 52.232.84.126 -u shea -p'Shea@dfcs%2017' malware_assignment -s -e "$md5_query;"))
	result_lenght=${#result[@]}
	echo count= $result_lenght
	for ((i=0 ; i<result_lenght ; i++))
	do
	echo "Record Number $i: ${result[$i]}"
	a[$i]=${result[$i]}
	echo a[$i] ${a[$i]}
	done
	#
	echo md5_query: $md5_query
	echo result $result
	#export the result string to use in another script
	export result
	echo result $result

#insert into table (field1,field2,field3) values('http://www.site.com/$hash','$file','$size');
#EOF
#note this may change
#initial find hashes
#
#this will check all files in directory and calculate hashes and store them in a file
#find -name "*" -type f -executable | md5sum * | cut -d' ' -f1 > newtest-hashes-found
#
#this will ckeck to see if any hashes calculate match thoes in another file
#todo create text-file from variable result or just swap file for variable(untested as yet just a thought)
#grep -Fwf "newtest-hashes-found" "dir-test"
#
}


#connect to database and query
query_function () {
    echo "in query_function now"
    #setup database variables config
    database_host="52.232.84.126"
    username="shea"
    password="Shea@dfcs%2017"
    database_name="malware_assignment"
    #todo maybe select everything not just md5
    md5_query="select * from malware"
    #set result variable to query results
    result=$(mysql -h $database_host -u $username -p$password $database_name -s -e "$md5_query;") 
    echo result $result
}
find_files_directory () {
    echo "in find_files_directory function now"
    #get the hash values from directory/s
    #find /root/Desktop/Malware-Project-AS02/ -name "*" -type f -executable | md5sum * | cut -d' ' -f1 > /root/Desktop/Malware-Project-AS02/newtest-hashes-found
#to do store paths in variables as locations may change
find /root/Desktop/Malware-Project-AS02/ -name "*" -type f -executable | md5sum * > /root/Desktop/Malware-Project-AS02/newtest-hashes-found
    #check to see if hashes from malware hashes match found hashes
    echo "displaying calculated hashes from directory results: newtest-hashes-found"
    cat /root/Desktop/Malware-Project-AS02/newtest-hashes-found
    echo -e "\n"
    echo "testing hashes now"
    echo -e "\n"
    #grep -Fwf "/root/Desktop/Malware-Project-AS02/newtest-hashes-found" "/root/Desktop/Malware-Project-AS02/test_hashses.txt"
     
    echo "testing new test for results! newtest-hashes-found-stripped"
    echo  "$result" | grep --color -Fwf "/root/Desktop/Malware-Project-AS02/newtest-hashes-found" | cut -d' ' -f1 "/root/Desktop/Malware-Project-AS02/newtest-hashes-found" > newtest-hashes-found-stripped
cat newtest-hashes-found-stripped
    echo -e "\n"
echo -e "\nDone!"
#echo newline-test "$result" | tr ' ' '\n'

    
    echo "testing a test variable"
    test=$(grep --color -Fwf "/root/Desktop/Malware-Project-AS02/newtest-hashes-found-stripped" <<< $result)
    #check to see if variable is empty
    if [ ! -z  "$test"  ] ; 
       then echo "Not Empty"; 
       word_count=$(wc -w <<< $test) 
       echo -n "Total Virus's found: "; 
       echo -e $((word_count / 5))
       #do the mathsey stuff       
         for ((i=1 ; i<=$((word_count / 5)) ; i++))
         do
         echo "$i"
         #todo use awk or sed to grab the values at position 2 and 3 and 4
         # name md5 etc..
         #the loop may not be the right option here
         #maybe word count /5 number of rows to display this will involve inserting newlines after each row
         awk -F" " '{ print $($i),$($i+1) } ' <<< $test
         done   
       else "Not found in database!"

       fi 
    echo $test > /root/Desktop/Malware-Project-AS02/results_from_test.txt
    echo "test variable value: "${test}
    
    echo -e "\nvalue of tset variable stored in results_from_test.txt:"
    cat /root/Desktop/Malware-Project-AS02/results_from_test.txt
    echo -e "\n"
    #if ${test} #was trying to see if value was true for testing no joy as yet
    if (grep --color -Fwf "/root/Desktop/Malware-Project-AS02/newtest-hashes-found-stripped" <<< $result) #this is working now
      #to do show the matchin file name path of dodgey file
      
      then echo "This is known malware found in our database"    
      echo "testing hashes done! heading home now"
    else
    # echo if not found
    echo -e "Not found in database presumed safe (dont take my word for that tho)"
fi
}
#end function find_files_directory
#
#
#
#get known malware from online database and save to a varible
#this may not be the way to go if database was large
#it will do for now-- research doing it live eg test file1 > false test file2> etc..
echo "calling query_function function now"
query_function
echo -e "\n"
echo back from query_function now
echo -e "\n"
echo md5_query: $md5_query
echo result $result
#
#find files in directory and calculate md5 hahses
echo -e "\n"
echo "calling find_files_directory function now"
find_files_directory
echo -e "\n"
echo back home
#
echo -e "\nDone!"

